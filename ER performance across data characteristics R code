# --- Script dir & output root ---
.get_script_dir <- function() {
  if (requireNamespace("rstudioapi", quietly = TRUE)) {
    if (tryCatch(rstudioapi::isAvailable(), error = function(e) FALSE)) {
      ctx <- tryCatch(rstudioapi::getActiveDocumentContext(), error = function(e) NULL)
      if (!is.null(ctx) && nzchar(ctx$path)) return(dirname(ctx$path))
    }
  }
  if (!is.null(sys.frames()[[1]]$ofile)) return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
  args <- commandArgs(trailingOnly = FALSE)
  file_arg <- grep("^--file=", args, value = TRUE)
  if (length(file_arg)) return(dirname(normalizePath(sub("^--file=", "", file_arg))))
  getwd()
}
script_dir <- .get_script_dir()
setwd(script_dir)
message("Write to directory: ", normalizePath(file.path(script_dir, "projects", "causal_bench"), winslash = "/"))

# --- Dependencies ---
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
need_graph <- !requireNamespace("graph", quietly = TRUE)
need_rbgl  <- !requireNamespace("RBGL",  quietly = TRUE)
if (need_graph || need_rbgl) {
  options(BioC_mirror = "https://bioconductor.org")
  BiocManager::install(c(if (need_graph) "graph", if (need_rbgl) "RBGL"),
                       update = FALSE, ask = FALSE)
}
cran_pkgs <- c("pcalg","bnlearn","igraph","ggplot2","dplyr","tidyr","readr")
for (p in cran_pkgs) if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
suppressPackageStartupMessages({
  library(graph); library(RBGL)
  library(pcalg); library(bnlearn); library(igraph)
  library(ggplot2); library(dplyr); library(tidyr); library(readr)
})

# --- Directories ---
root <- file.path(script_dir, "projects", "causal_bench")
dirs <- file.path(root, c("R","data","output/raw","output/summary","figs","logs","configs"))
invisible(lapply(dirs, dir.create, recursive = TRUE, showWarnings = FALSE))
writeLines(enc2utf8("# Benchmark for PC/CPC/PC-stable vs GES/HC/Tabu (ER only)"),
           file.path(root,"README.md"), useBytes = TRUE)

# --- Utils (timeouts, adapters, metrics) ---
capture_time_with_timeout <- function(expr, timeout_seconds = 300) {
  t0 <- proc.time()
  result <- tryCatch({
    setTimeLimit(cpu = timeout_seconds, elapsed = timeout_seconds, transient = TRUE)
    res <- eval.parent(substitute(expr))
    setTimeLimit()
    res
  }, error = function(e) {
    setTimeLimit()
    structure(list(`__error__` = conditionMessage(e)), class = "captured_error")
  })
  elapsed <- as.numeric((proc.time() - t0)[3])
  if (inherits(result, "captured_error")) {
    error_msg <- result$`__error__`
    if (grepl("reached elapsed time limit|reached CPU time limit", error_msg)) {
      error_msg <- paste0("TIMEOUT after ", timeout_seconds, " seconds")
    }
    list(value = NULL, elapsed = elapsed, error = error_msg)
  } else list(value = result, elapsed = elapsed, error = NA_character_)
}

get_timeout_for_problem <- function(n, p, dens, alg) {
  base_timeout <- 120
  n_factor <- log10(n/100)
  p_factor <- (p/10)^1.5
  dens_factor <- switch(alg,
                        "HC" = if (dens == "dense") 5 else 1.5,
                        "Tabu" = if (dens == "dense") 6 else 1.5,
                        if (dens == "dense") 3 else 1)
  alg_factor <- switch(alg, "PC"=2, "CPC"=3, "PC-stable"=4, "GES"=1.5, "HC"=3, "Tabu"=4)
  timeout <- base_timeout * n_factor * p_factor * dens_factor * alg_factor
  min_timeout <- 60
  max_timeout <- if (alg %in% c("HC","Tabu")) 1800 else 900
  max(min_timeout, min(max_timeout, round(timeout)))
}

adj_from_graphNEL <- function(gNEL){A<-as(gNEL,"matrix");mode(A)<-"numeric";diag(A)<-0;A}
adj_from_pc  <- function(pcFit) adj_from_graphNEL(pcFit@graph)
adj_from_ges <- function(gesFit){
  if (is.list(gesFit) && !is.null(gesFit$essgraph)) return(adj_from_graphNEL(gesFit$essgraph))
  if ("essgraph" %in% slotNames(gesFit)) return(adj_from_graphNEL(methods::slot(gesFit,"essgraph")))
  if (inherits(gesFit,"graphNEL")) return(adj_from_graphNEL(gesFit))
  if (is.list(gesFit) && !is.null(gesFit$graph)) return(adj_from_graphNEL(gesFit$graph))
  stop("Cannot extract graph from GES result.")
}
adj_from_bn <- function(bnObj){A<-bnlearn::amat(bnObj);mode(A)<-"numeric";diag(A)<-0;A}
adj_from_bn_cpdag <- function(bnObj){cp<-bnlearn::cpdag(bnObj);A<-bnlearn::amat(cp);mode(A)<-"numeric";diag(A)<-0;A}
to_skeleton <- function(A){S<-1*((A+t(A))>0);diag(S)<-0;S}
upper <- function(M) M[upper.tri(M, diag = FALSE)]

metrics_from_adjs <- function(estA, trueCPA) {
  if (is.null(estA)) return(data.frame(skel_precision=NA_real_, skel_recall=NA_real_,
                                       skel_f1=NA_real_, shd_cpdag=NA_real_))
  S_est <- to_skeleton(estA); S_true <- to_skeleton(trueCPA)
  tp <- sum(upper(S_est==1 & S_true==1))
  fp <- sum(upper(S_est==1 & S_true==0))
  fn <- sum(upper(S_est==0 & S_true==1))
  prec <- ifelse(tp+fp==0, NA, tp/(tp+fp))
  rec  <- ifelse(tp+fn==0, NA, tp/(tp+fn))
  f1   <- ifelse(is.na(prec)|is.na(rec)|(prec+rec)==0, NA, 2*prec*rec/(prec+rec))
  shd_cpdag <- sum(estA != trueCPA)/2
  data.frame(skel_precision=prec, skel_recall=rec, skel_f1=f1, shd_cpdag=shd_cpdag)
}

dens_to_prob <- function(p, dens = c("sparse","dense")) {
  dens <- match.arg(dens); prob <- if (dens=="sparse") 2/p else 6/p; min(0.5, prob)
}
skewify  <- function(x){ z<-scale(x)[,1]; y<-exp(z); as.numeric(scale(y)[,1]) }
npn_rank <- function(x){ r<-rank(x, ties.method="average"); u<-(r-0.5)/length(r); qnorm(u) }

# --- Data generation (ER only) ---
gen_true_dag_er <- function(p, dens) randomDAG(p, prob = dens_to_prob(p, dens), lB = 0.3, uB = 1.0)

sem_gaussian_from_dag <- function(dag, n, noise_sd = 1) {
  B <- pcalg::wgtMatrix(dag); B[is.na(B)] <- 0; B <- as.matrix(B)
  p <- ncol(B)
  G <- igraph::graph_from_adjacency_matrix(B != 0, mode = "directed")
  ord <- as.integer(igraph::topo_sort(G, mode = "out"))
  X <- matrix(0, n, p)
  for (k in ord) {
    parents <- which(B[,k] != 0)
    X[,k] <- rnorm(n, 0, noise_sd)
    if (length(parents) > 0) X[,k] <- X[,k] + X[,parents,drop=FALSE] %*% B[parents,k,drop=FALSE]
  }
  colnames(X) <- colnames(B); X
}

# --- Single run ---
run_once <- function(p = 20, n = 1000,
                     dist_type = c("gaussian","skew"),
                     dens = c("sparse","dense"),
                     alpha = 0.05,
                     apply_npn_for_skew = FALSE,
                     seed = 123,
                     enable_timeout = TRUE,
                     custom_timeouts = NULL) {
  
  dist_type <- match.arg(dist_type); dens <- match.arg(dens); set.seed(seed)
  labels <- paste0("X", seq_len(p))
  
  dag_true   <- gen_true_dag_er(p, dens)
  A_true_cpd <- adj_from_graphNEL(dag2cpdag(dag_true))
  
  X <- sem_gaussian_from_dag(dag_true, n = n); colnames(X) <- labels
  if (dist_type == "skew") X <- apply(X, 2, skewify)
  df_raw <- as.data.frame(X)
  df_for_alg <- if (dist_type == "skew" && apply_npn_for_skew)
    as.data.frame(apply(df_raw, 2, npn_rank)) else df_raw
  suff <- list(C = cor(df_for_alg), n = nrow(df_for_alg))
  
  if (enable_timeout) {
    pc_timeout  <- if (!is.null(custom_timeouts$PC)) custom_timeouts$PC else get_timeout_for_problem(n,p,dens,"PC")
    cpc_timeout <- if (!is.null(custom_timeouts$CPC)) custom_timeouts$CPC else get_timeout_for_problem(n,p,dens,"CPC")
    pcs_timeout <- if (!is.null(custom_timeouts$`PC-stable`)) custom_timeouts$`PC-stable` else get_timeout_for_problem(n,p,dens,"PC-stable")
    ges_timeout <- if (!is.null(custom_timeouts$GES)) custom_timeouts$GES else get_timeout_for_problem(n,p,dens,"GES")
    hc_timeout  <- if (!is.null(custom_timeouts$HC)) custom_timeouts$HC else get_timeout_for_problem(n,p,dens,"HC")
    tabu_timeout<- if (!is.null(custom_timeouts$Tabu)) custom_timeouts$Tabu else get_timeout_for_problem(n,p,dens,"Tabu")
  } else pc_timeout <- cpc_timeout <- pcs_timeout <- ges_timeout <- hc_timeout <- tabu_timeout <- Inf
  
  pc_res <- capture_time_with_timeout({
    fit <- pc(suffStat=suff, indepTest=gaussCItest, alpha=alpha, labels=labels,
              skel.method="original", conservative=FALSE, maj.rule=FALSE)
    adj_from_pc(fit)
  }, timeout_seconds = pc_timeout)
  
  cpc_res <- capture_time_with_timeout({
    fit <- pc(suffStat=suff, indepTest=gaussCItest, alpha=alpha, labels=labels,
              skel.method="original", conservative=TRUE, maj.rule=FALSE)
    adj_from_pc(fit)
  }, timeout_seconds = cpc_timeout)
  
  pcs_res <- capture_time_with_timeout({
    fit <- pc(suffStat=suff, indepTest=gaussCItest, alpha=alpha, labels=labels,
              skel.method="stable", conservative=FALSE, maj.rule=FALSE)
    adj_from_pc(fit)
  }, timeout_seconds = pcs_timeout)
  
  ges_res <- capture_time_with_timeout({
    Xm <- as.matrix(df_for_alg); colnames(Xm) <- labels
    sc <- methods::new("GaussL0penObsScore", dat = Xm)
    fit <- pcalg::ges(sc); adj_from_ges(fit)
  }, timeout_seconds = ges_timeout)
  
  hc_res   <- capture_time_with_timeout({ adj_from_bn_cpdag(hc(df_for_alg,  score="bic-g")) }, timeout_seconds = hc_timeout)
  tabu_res <- capture_time_with_timeout({ adj_from_bn_cpdag(tabu(df_for_alg, score="bic-g", tabu=50)) }, timeout_seconds = tabu_timeout)
  
  dplyr::bind_rows(
    data.frame(alg="PC",        metrics_from_adjs(pc_res$value,   A_true_cpd), time=pc_res$elapsed,  err=pc_res$error),
    data.frame(alg="CPC",       metrics_from_adjs(cpc_res$value,  A_true_cpd), time=cpc_res$elapsed, err=cpc_res$error),
    data.frame(alg="PC-stable", metrics_from_adjs(pcs_res$value,  A_true_cpd), time=pcs_res$elapsed, err=pcs_res$error),
    data.frame(alg="GES",       metrics_from_adjs(ges_res$value,  A_true_cpd), time=ges_res$elapsed, err=ges_res$error),
    data.frame(alg="HC",        metrics_from_adjs(hc_res$value,   A_true_cpd), time=hc_res$elapsed,  err=hc_res$error),
    data.frame(alg="Tabu",      metrics_from_adjs(tabu_res$value, A_true_cpd), time=tabu_res$elapsed,err=tabu_res$error)
  ) |>
    dplyr::mutate(p=p, n=n, dist=dist_type, dens=dens, alpha=alpha,
                  npn_for_skew=apply_npn_for_skew, seed=seed)
}

# --- Grid experiment ---
compare_grid <- function(Ns = c(100, 1000, 10000),
                         Ps = c(10, 20, 50),
                         Dists = c("gaussian","skew"),
                         Dens = c("sparse","dense"),
                         reps = 10, alpha = 0.05,
                         apply_npn_for_skew = FALSE,
                         seed0 = 20250816,
                         enable_timeout = TRUE,
                         custom_timeouts = NULL) {
  
  grid <- expand.grid(n=Ns, p=Ps, dist=Dists, dens=Dens, stringsAsFactors = FALSE)
  out <- vector("list", nrow(grid)*reps); k <- 1L
  cat(sprintf("Starting ER benchmark: %d conditions × %d reps\n", nrow(grid), reps))
  
  for (i in seq_len(nrow(grid))) {
    gi <- grid[i,]
    cat(sprintf("\n[%d/%d] n=%d, p=%d, dist=%s, dens=%s\n",
                i, nrow(grid), gi$n, gi$p, gi$dist, gi$dens))
    for (r in seq_len(reps)) {
      cat(sprintf("  Rep %d/%d ... ", r, reps))
      out[[k]] <- run_once(p=gi$p, n=gi$n, dist_type=gi$dist, dens=gi$dens,
                           alpha=alpha, apply_npn_for_skew=apply_npn_for_skew,
                           seed=seed0 + i*1000 + r,
                           enable_timeout=enable_timeout,
                           custom_timeouts=custom_timeouts)
      cat("done\n"); k <- k + 1L
    }
  }
  
  res <- dplyr::bind_rows(out)
  
  summary <- res |>
    dplyr::group_by(alg, n, p, dist, dens, npn_for_skew) |>
    dplyr::summarise(
      skel_f1_mean = mean(skel_f1, na.rm = TRUE),
      skel_f1_sd   = sd(skel_f1,   na.rm = TRUE),
      shd_mean     = mean(shd_cpdag, na.rm = TRUE),
      shd_sd       = sd(shd_cpdag,   na.rm = TRUE),
      time_mean    = mean(time, na.rm = TRUE),
      time_sd      = sd(time,   na.rm = TRUE),
      err_count    = sum(!is.na(err)),
      timeout_count = sum(!is.na(err) & grepl("TIMEOUT", err)),
      .groups="drop"
    )
  list(raw=res, summary=summary)
}

# --- Quick checks ---
check_expectations <- function(sumdf) {
  cat("\n=== Quick sanity checks ===\n")
  base <- sumdf %>% dplyr::filter(dist=="gaussian", dens=="sparse")
  if (nrow(base) > 0) {
    chk1 <- base %>% dplyr::group_by(alg, p) %>% dplyr::arrange(n, .by_group=TRUE) %>%
      dplyr::summarise(F1_nondec = all(diff(skel_f1_mean) >= -1e-6),
                       SHD_nonde  = all(diff(-shd_mean)     >= -1e-6),
                       .groups="drop")
    if (all(chk1$F1_nondec & chk1$SHD_nonde)) cat("OK: F1 up / SHD down with n\n")
    else cat("Note: some combos violate monotonicity; consider more reps.\n")
  }
  base2 <- sumdf %>% dplyr::select(alg,n,p,dist,dens,skel_f1_mean,shd_mean) %>%
    tidyr::pivot_wider(names_from=dens, values_from=c(skel_f1_mean,shd_mean))
  if (all(c("skel_f1_mean_sparse","skel_f1_mean_dense","shd_mean_sparse","shd_mean_dense") %in% names(base2))) {
    better_sparse <- with(base2, mean((skel_f1_mean_sparse >= skel_f1_mean_dense - 1e-8) &
                                        (shd_mean_sparse     <= shd_mean_dense     + 1e-8), na.rm=TRUE))
    if (isTRUE(better_sparse > 0.5)) cat("OK: sparse tends to be easier\n")
    else cat("Note: sparse advantage not obvious; try tuning alpha/reps.\n")
  }
}

# --- Params & run ---
Ns <- c(100, 1000, 10000)
Ps <- c(10, 20, 50)
Dists <- c("gaussian","skew")
Dens <- c("sparse","dense")
alpha_val <- 0.05
reps_val  <- 10
enable_timeout <- TRUE
custom_timeouts <- list(PC=600, CPC=720, `PC-stable`=900, GES=480, HC=1200, Tabu=1500)

cat("=== ER-ONLY CAUSAL DISCOVERY BENCHMARK ===\n")
res_ok <- compare_grid(Ns=Ns, Ps=Ps, Dists=Dists, Dens=Dens,
                       reps=reps_val, alpha=alpha_val,
                       enable_timeout=enable_timeout, custom_timeouts=custom_timeouts)

readr::write_csv(res_ok$raw,     file.path(root,"output","raw","raw_results_ER_only.csv"))
readr::write_csv(res_ok$summary, file.path(root,"output","summary","summary_ER_only.csv"))
check_expectations(res_ok$summary)

# --- Visualization ---
ggplot2::theme_set(theme_bw(base_size = 12))
alg_levels <- c("PC","CPC","PC-stable","GES","HC","Tabu")
alg_labels <- c("PC","CPC","PCS","GES","HC","Tabu")
cb_palette <- c("#1b9e77","#d95f02","#7570b3","#66a61e","#e7298a","#e6ab02")

legend_bottom <- theme(legend.position = "bottom", legend.box = "horizontal",
                       legend.margin = margin(2,0,2,0),
                       legend.key.height = unit(10, "pt"),
                       legend.key.width  = unit(16, "pt"))
facet_style <- theme(strip.background = element_rect(fill = "grey95", colour = NA),
                     panel.grid.minor = element_blank())

title_center <- theme(
  plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
  plot.subtitle = element_text(hjust = 0.5, size = 12, colour = "gray40"),
  plot.title.position = "plot"
)


summary_df <- res_ok$summary %>%
  dplyr::mutate(
    alg  = factor(alg, levels = alg_levels, labels = alg_labels),
    n    = factor(n, levels = sort(unique(n))),
    p    = factor(p, levels = sort(unique(p))),
    dens = factor(dens, levels = c("dense","sparse")),
    dist = factor(dist, levels = c("gaussian","skew"))
  )

raw_df <- res_ok$raw %>%
  dplyr::mutate(
    alg  = factor(alg, levels = alg_levels, labels = alg_labels),
    n    = factor(n, levels = sort(unique(n))),
    p    = factor(p, levels = sort(unique(p))),
    dens = factor(dens, levels = c("dense","sparse")),
    dist = factor(dist, levels = c("gaussian","skew"))
  )

pr_summary <- raw_df %>%
  dplyr::group_by(alg, n, p, dens, dist) %>%
  dplyr::summarise(
    prec_mean = mean(skel_precision, na.rm = TRUE),
    prec_sd   = sd(skel_precision,   na.rm = TRUE),
    rec_mean  = mean(skel_recall,    na.rm = TRUE),
    rec_sd    = sd(skel_recall,      na.rm = TRUE),
    .groups = "drop"
  ) %>%
  dplyr::mutate(
    n    = factor(n, levels = sort(unique(as.numeric(as.character(n))))),
    p    = factor(p, levels = sort(unique(as.numeric(as.character(p))))),
    dens = factor(dens, levels = c("dense","sparse")),
    dist = factor(dist, levels = c("gaussian","skew"))
  )



p_bar_precision <- ggplot(pr_summary, aes(x = n, y = prec_mean, fill = alg)) +
  geom_col(position = position_dodge(width = 0.72), width = 0.62) +
  geom_errorbar(aes(ymin = pmax(prec_mean - prec_sd, 0),
                    ymax = pmin(prec_mean + prec_sd, 1)),
                width = 0.20, position = position_dodge(width = 0.72)) +
  facet_grid(dist + dens ~ p, labeller = label_both) +
  scale_fill_manual(values = cb_palette, name = "Algorithm",
                    guide = guide_legend(nrow = 1, byrow = TRUE)) +
  labs(
    title = "Skeleton Precision Across Sample Size (ER graphs)",
    subtitle = "Mean ± SD across replications • Rows: Distribution × Density • Cols: p",
    x = "Sample Size (n)", y = "Precision"
  ) +
  title_center + facet_style + legend_bottom
ggsave(file.path(root, "figs", "er_bar_precision_vs_n.png"),
       p_bar_precision, width = 12, height = 8, dpi = 300, bg = "white")


p_bar_recall <- ggplot(pr_summary, aes(x = n, y = rec_mean, fill = alg)) +
  geom_col(position = position_dodge(width = 0.72), width = 0.62) +
  geom_errorbar(aes(ymin = pmax(rec_mean - rec_sd, 0),
                    ymax = pmin(rec_mean + rec_sd, 1)),
                width = 0.20, position = position_dodge(width = 0.72)) +
  facet_grid(dist + dens ~ p, labeller = label_both) +
  scale_fill_manual(values = cb_palette, name = "Algorithm",
                    guide = guide_legend(nrow = 1, byrow = TRUE)) +
  labs(
    title = "Skeleton Recall Across Sample Size (ER graphs)",
    subtitle = "Mean ± SD across replications • Rows: Distribution × Density • Cols: p",
    x = "Sample Size (n)", y = "Recall"
  ) +
  title_center + facet_style + legend_bottom
ggsave(file.path(root, "figs", "er_bar_recall_vs_n.png"),
       p_bar_recall, width = 12, height = 8, dpi = 300, bg = "white")

p_line_f1 <- ggplot(summary_df,
                    aes(x = as.numeric(as.character(n)),
                        y = skel_f1_mean, colour = alg, fill = alg, group = alg)) +
  geom_ribbon(aes(ymin = pmax(skel_f1_mean - skel_f1_sd, 0),
                  ymax = pmin(skel_f1_mean + skel_f1_sd, 1)),
              alpha = 0.12, colour = NA) +
  geom_line(size = 0.9) + geom_point(size = 1.6) +
  scale_x_continuous(breaks = as.numeric(levels(summary_df$n)),
                     labels = levels(summary_df$n)) +
  facet_grid(dist + dens ~ p, labeller = label_both) +
  scale_colour_manual(values = cb_palette, name = "Algorithm",
                      guide = guide_legend(nrow = 1, byrow = TRUE)) +
  scale_fill_manual(values = cb_palette, guide = "none") +
  labs(
    title = "Skeleton F1 Across Sample Size (ER graphs)",
    subtitle = "Mean ± SD across replications • Rows: Distribution × Density • Cols: p",
    x = "Sample Size (n)", y = "F1-Score"
  ) +
  title_center + facet_style + legend_bottom
ggsave(file.path(root, "figs", "er_line_f1_vs_n.png"),
       p_line_f1, width = 12, height = 8, dpi = 300, bg = "white")



p_line_shd <- ggplot(summary_df,
                     aes(x = as.numeric(as.character(n)),
                         y = shd_mean, colour = alg, fill = alg, group = alg)) +
  geom_ribbon(aes(ymin = pmax(shd_mean - shd_sd, 0),
                  ymax = shd_mean + shd_sd),
              alpha = 0.12, colour = NA) +
  geom_line(size = 0.9) + geom_point(size = 1.6) +
  scale_x_continuous(breaks = as.numeric(levels(summary_df$n)),
                     labels = levels(summary_df$n)) +
  facet_grid(dist + dens ~ p, labeller = label_both, scales = "free_y") +
  scale_colour_manual(values = cb_palette, name = "Algorithm",
                      guide = guide_legend(nrow = 1, byrow = TRUE)) +
  scale_fill_manual(values = cb_palette, guide = "none") +
  labs(
    title = "Structural Hamming Distance Across Sample Size (ER graphs)",
    subtitle = "Mean ± SD across replications • Rows: Distribution × Density • Cols: p",
    x = "Sample Size (n)", y = "SHD"
  ) +
  title_center + facet_style + legend_bottom
ggsave(file.path(root, "figs", "er_line_shd_vs_n.png"),
       p_line_shd, width = 12, height = 8, dpi = 300, bg = "white")



p_line_time <- ggplot(summary_df,
                      aes(x = as.numeric(as.character(n)),
                          y = time_mean, colour = alg, fill = alg, group = alg)) +
  geom_ribbon(aes(ymin = pmax(time_mean - time_sd, 1e-6),
                  ymax = time_mean + time_sd),
              alpha = 0.12, colour = NA) +
  geom_line(size = 0.9) + geom_point(size = 1.6) +
  scale_x_continuous(breaks = as.numeric(levels(summary_df$n)),
                     labels = levels(summary_df$n)) +
  scale_y_log10() +
  facet_grid(dist + dens ~ p, labeller = label_both) +
  scale_colour_manual(values = cb_palette, name = "Algorithm",
                      guide = guide_legend(nrow = 1, byrow = TRUE)) +
  scale_fill_manual(values = cb_palette, guide = "none") +
  labs(
    title = "Runtime Across Sample Size (ER graphs)",
    subtitle = "Mean ± SD across replications • Rows: Distribution × Density • Cols: p",
    x = "Sample Size (n)", y = "Runtime (seconds, log scale)"
  ) +
  title_center + facet_style + legend_bottom
ggsave(file.path(root, "figs", "er_line_time_vs_n_log.png"),
       p_line_time, width = 12, height = 8, dpi = 300, bg = "white")



# --- Session info & brief summary ---
sink(file.path(root, "logs", "sessionInfo.txt"))
cat("=== Session Information ===\n")
print(Sys.time())
cat("\nTimeouts enabled:", enable_timeout, "\n")
for (alg in names(custom_timeouts)) {
  timeout_val <- custom_timeouts[[alg]]
  cat(sprintf("%-10s %4d sec\n", alg, timeout_val))
}
cat("\nDesign:\n")
cat("n:", paste(Ns, collapse=", "), "\n")
cat("p:", paste(Ps, collapse=", "), "\n")
cat("dist:", paste(Dists, collapse=", "), "\n")
cat("dens:", paste(Dens, collapse=", "), "\n")
cat("reps:", reps_val, "\n\n")
print(sessionInfo())
sink()

cat("\n=== EXPERIMENT COMPLETED ===\n")
cat("Output location:", normalizePath(root, winslash = "/"), "\n")

overall_perf <- res_ok$summary %>%
  dplyr::group_by(alg) %>%
  dplyr::summarise(
    conditions = n(),
    avg_f1 = mean(skel_f1_mean, na.rm = TRUE),
    f1_std = sd(skel_f1_mean, na.rm = TRUE),
    avg_shd = mean(shd_mean, na.rm = TRUE),
    shd_std = sd(shd_mean, na.rm = TRUE),
    avg_time = mean(time_mean, na.rm = TRUE),
    time_std = sd(time_mean, na.rm = TRUE),
    error_rate = mean(err_count > 0, na.rm = TRUE),
    timeout_rate = mean(timeout_count > 0, na.rm = TRUE),
    .groups = "drop"
  ) %>% dplyr::arrange(desc(avg_f1))
print(overall_perf)

message("Completed: ", normalizePath(root, winslash = "/"))

